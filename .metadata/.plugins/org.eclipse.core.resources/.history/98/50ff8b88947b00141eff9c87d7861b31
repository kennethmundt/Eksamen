/**
 * @author kenneth, Tina, Elvis og Jogvan
 * First class to receive input from the presentation layer.
 * Distributes data to other classes in the application layer.
 */

package application;

import javax.swing.table.DefaultTableModel;

import dataAccess.ControllerDb;

public class ControllerApp
{
    ControllerDb controllerDb = new ControllerDb();
    UpdateApp updateApp = new UpdateApp();
    DeleteApp deleteApp = new DeleteApp();
    OverviewApp overviewApp = new OverviewApp();
    CreateApp createApp = new CreateApp();
    DropDownApp readDropDown = new DropDownApp();
    ReadApp readApp = new ReadApp();

    /**
     * Passing data from presentation to controller.
     * 
     * @param nameColumn
     * @param addressColumn
     * @param phoneColumn
     * @param mailColumn
     * @param customerId
     */

    // Reads values from CustomerViewGui and send it to UpdateApp class
    public void saveChanges(String nameColumn, String addressColumn, String phoneColumn, String mailColumn, String customerId)
    {
	updateApp.saveChanges(nameColumn, addressColumn, phoneColumn, mailColumn, customerId);
    }

    // Reads values from CustomerViewGui and send it to UpdateApp class
    public void deleteCustomer(String phone)
    {
	deleteApp.deleteCustomer(phone);
    }

    // Reads values from CustomerOverViewApp class and send values to the
    // CustomerViewGui JTable
    public DefaultTableModel getTableModel()
    {
	DefaultTableModel data = overviewApp.getTableModel();

	return data;
    }

    public Customer readCustomer(String phone)
    {
	return overviewApp.readCustomer(phone);
    }

    // Get values from CreateCustomerGui and send to the CreateCustomerApp
    public void create(String name, String address, String phone, String mail)
    {
	createApp.create(name, address, phone, mail);
    }

    // Get Animal from CreateCustomerGui and send to CustomerOverviewApp
    public void create(String animalName, String animalBirth, int id)
    {
	createApp.create(animalName, animalBirth, id);
    }
    
    public void create(String treatmentId, int animalId, String dateString, String time)
    {
	createApp.create(treatmentId, animalId, dateString, time);
    }

    // Get animal from AnimalDropDown and send to CreateCustomerGui
    public int readAnimal(String animal)
    {
	return readApp.readAnimal(animal);
    }
    
    public int readAnimal(String animal, String customerId)
    {
	return readApp.readAnimal(animal, customerId);
    }

    // Get animal from AnimalDropDown and send to CreateCustomerGui
    public Object[] getAnimal()
    {
	return readDropDown.readAnimal();
    }
    
    public Object[] getAnimal(Customer customer)
    {
	return readDropDown.readAnimal(customer);
    }
    
    // Reads values from CustomerOverViewApp class and send values to the
    // TreatmentViewGui JTable
    public DefaultTableModel getTreatmentTableModel()
    {
	DefaultTableModel data = overviewApp.getTreatmentTableModel();

	return data;
    }
    
    //Get variabel treatmentName, price, duration and comment from the CreateTreatmentGui
    public void createTreatment(String treatmentName, String price, String duration, String comment)
    {
	createApp.createTreatment(treatmentName, price, duration, comment);
    }
    
    //If JTable in TreatmentViewGui is change then save changes
    public void saveChangesTreatment(String treatmentColumn, String priceColumn, String durationColumn, String commentColumn, String customerId)
    {
	updateApp.saveChangesTreatment(treatmentColumn, priceColumn, durationColumn, commentColumn, customerId);
    }
    
    //Take the variable from JTable and send to OverviewApp
    public Treatment readTreatment(String treatmentName)
    {
	return overviewApp.readTreatment(treatmentName);
    }
    
    //Delete treatment from JTable
    public void deleteTreatment(String treatmentName)
    {
	deleteApp.deleteTreatment(treatmentName);
    }
    
    public Object[] getTreatment()
    {
	return readDropDown.readTreatment();
    }
    
    public Object[] getTime()
    {
	return readDropDown.readTime();
    }

    public String getPassword(String username)
    {
	return controllerDb.getPassword(username);
    }

    public DefaultTableModel getBookingTableModel()
    {
	DefaultTableModel data = overviewApp.getBookingTableModel();
	return data;
    }
}